#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform int divisions;
uniform int divisionsLightRay;


#define FISH_EYE 1
#define REGULAR 0
uniform int cameraMode;

#define LINEAR 0
#define EXPONENTIAL 1
uniform int sampling;


uniform vec2 sunAngles;

const float PI = 3.14159265358979323846;
const float earthRadius = 6360000.0;
const float atmosRadius = 6420000.0;
const float fourPI = 4.0 * PI;

layout(binding = 1, rg32f) uniform writeonly image2D opticalDepths;

float distToTopAtmosphere(vec3 origin, vec3 dir) {

	// project the center of the earth on to the ray
	vec3 u = vec3(-origin);
	// k is the signed distance from the origin to the projection
	float k = dot(dir,u);
	vec3 proj = origin + k * dir;
	
	// compute the distance from the projection to the atmosphere
	float aux = length(proj);
	float dist = sqrt(atmosRadius * atmosRadius - aux*aux);
	
	dist += k;	
	return dist;
}


void initSampling(in float dist, in int div, out float quotient, out float segLength) {

	if (sampling == EXPONENTIAL) {
		quotient =  pow(dist, 1.0/(float(div)));
		//segLength = quotient - 1;
	}
	else { // linear sampling
		segLength = dist/float(div);
	}
}


void computeSegLength(float quotient, float current, inout float segLength) {

	if (sampling == EXPONENTIAL) {
		segLength = current * quotient - current;
	}
	else { // linear sampling
	}
}




vec2 calculateDepth(vec3 dir, vec3 sunDir, vec3 origin, float dist) {

	float quotient, quotientLight, segLengthLight, segLength;
	
	float cosViewSun = dot(dir, sunDir);
	
	float opticalDepthRayleigh = 0;
	float opticalDepthMie = 0;

	float current = 1;
	initSampling(dist, divisions, quotient, segLength);
	float height;
	for(int i = 0; i < divisions; ++i) {
		computeSegLength(quotient, current, segLength);
		vec3 samplePos = origin + (current + segLength * 0.5) * dir;
		height = length(samplePos) - earthRadius;
		if (height < 0) {
			break;
		}
		
		float distLightRay = distToTopAtmosphere(samplePos, sunDir);	

		current += segLength;
	}

	return vec2(opticalDepthRayleigh, opticalDepthMie);
}


void main() {

	vec3 result;
	vec2 sunAnglesRad = vec2(sunAngles.x, sunAngles.y) * vec2(PI/180);
	vec3 sunDir = vec3(cos(sunAnglesRad.y) * sin(sunAnglesRad.x),
							 sin(sunAnglesRad.y),
							-cos(sunAnglesRad.y) * cos(sunAnglesRad.x));
							
	vec3 origin = vec3(0.0, earthRadius+1, 0.0);

	
	if (cameraMode == REGULAR) { // normal camera
	
		vec2 pos = tc * vec2(ratio*angle, angle);
		vec3 camRight = cross(camView, camUp);
		vec3 dir = camUp * pos.y + camRight * pos.x + camView;
		dir = normalize(dir);
		float dist = distToTopAtmosphere(origin, dir);
		
		result = skyColor(dir, sunDir, origin, dist);
	}
	else { // fish eye camera

		float x = tc.x * ratio;
		float y = tc.y;
		float z = x*x + y*y;
		if (z < 1) {
			float phi = atan(y,x);
			float theta = acos(1-z);
			vec3 dir = vec3(sin(theta) * cos(phi), cos(theta), sin(theta) * sin(phi));
			float dist = distToTopAtmosphere(origin, dir);
			
			result = skyColor(dir, sunDir, origin, dist);
		}
		else 
			result = vec3(0);
	}
		
	// tone mapping
	vec3 white_point = vec3(1.0);
	result = pow(vec3(1.0) - exp(-result / white_point * exposure), vec3(1.0 / 2.2));
	
	outputF = vec4(result, 1);
}